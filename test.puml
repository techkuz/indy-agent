@startuml
Alice --> Bob : invite
rnote left
endpoint_uri = 'aliceIP/offer'
(endpoint_did, endpoint_key) = await did.create_and_store_my_did(alice.wallet_handle, "{}")
connection_key = uuid.uuid4().hex
    -
    * endpoint information
       endpoint did
           or
       endpoint uri
       endpoint key
    * connection key
end note

Bob --> Alice: request
rnote right
one_time_encr_key = uuid.uuid4().hex
(alice_endpoint_did, bob_endpoint_key) = await did.create_and_store_my_did(bob.wallet_handle, "{}")

inner_msg = dict(
        type="did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/routing/1.0/forward_to_key",
        key=one_time_encr_key,
        message=dict(
            type="did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/connections/1.0/request",
            key=bob_endpoint_key,
            message=await crypto.auth_crypt(bob.wallet_handle, bob_endpoint_key, alice.endpoint_key, bob_endpoint_did)
        )
    )

outer_message = dict(
    type=CONN_NEW.SEND_REQUEST,
    message=await crypto.anon_crypt(alice.endpoint_key, inner_msg)
)

-
anon_crypted(endpoint_key, {
    @type: "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/routing/1.0/forward_to_key",
    key: one time encryption key,
    content: {
        @type: "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/connections/1.0/request",
        key: connection key,
        content: auth_crypted(connection key, {
            did: // did on a public ledger
                or
            did_doc:
        })
    }
})
end note

@enduml